import requests
import datetime
import sqlite3
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.utils.exceptions import BotBlocked
from apscheduler.schedulers.asyncio import AsyncIOScheduler

tg_bot_token = "-"
open_weather_token = "-"

bot = Bot(token=tg_bot_token)
dp = Dispatcher(bot)

# –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect('weather_bot.db')
cur = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users
cur.execute("""CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY,
                user_id INTEGER UNIQUE,
                city TEXT)""")
conn.commit()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
cur.execute("PRAGMA table_info(users)")
columns = [column[1] for column in cur.fetchall()]

if 'last_alert_time_lvl_2' not in columns:
    cur.execute("ALTER TABLE users ADD COLUMN last_alert_time_lvl_2 TEXT")
if 'last_alert_time_lvl_3' not in columns:
    cur.execute("ALTER TABLE users ADD COLUMN last_alert_time_lvl_3 TEXT")
if 'last_alert_time_lvl_4' not in columns:
    cur.execute("ALTER TABLE users ADD COLUMN last_alert_time_lvl_4 TEXT")
conn.commit()


@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –º–Ω–µ –≥–æ—Ä–æ–¥, –∞ —è –±—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –ø–æ–≥–æ–¥–æ–π –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—Ç—å —Ç–µ–±—è –æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —É–≥—Ä–æ–∑–∞—Ö.")


@dp.message_handler()
async def add_or_update_city(message: types.Message):
    user_id = message.from_user.id
    city = message.text.strip()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cur.execute("REPLACE INTO users (user_id, city) VALUES (?, ?)", (user_id, city))
    conn.commit()

    await message.reply(f"–ì–æ—Ä–æ–¥ {city} –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω. –¢–µ–ø–µ—Ä—å —è –±—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –ø–æ–≥–æ–¥–æ–π –≤ —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ.")


def get_weather_data(city):
    try:
        response = requests.get(
            f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={open_weather_token}&units=metric"
        )
        return response.json()
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ: {e}")


def get_forecast_data(city):
    try:
        response = requests.get(
            f"http://api.openweathermap.org/data/2.5/forecast?q={city}&appid={open_weather_token}&units=metric"
        )
        return response.json()
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–≥–Ω–æ–∑–µ: {e}")


def get_danger_level(temp, wind, pop, humidity):
    danger_levels = {
        "lvl_1": "üü© –û–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ—Ç, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ç–∏–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.",
        "lvl_2": "üü® –ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–∞—è –ø–æ–≥–æ–¥–∞, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –Ω–∞—Ä—É—à–∏—Ç—å –ø–ª–∞–Ω—ã –Ω–∞ –¥–µ–Ω—å.",
        "lvl_3": "üüß –û–ø–∞—Å–Ω–∞—è –ø–æ–≥–æ–¥–∞, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –Ω–∞–Ω–µ—Å—Ç–∏ —É—â–µ—Ä–± –∑–¥–æ—Ä–æ–≤—å—é, –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–º –ø–æ—Ç–µ—Ä—è–º –∏ —Ç—Ä–∞—Ç–∞–º.",
        "lvl_4": "üü• –í–ù–ò–ú–ê–ù–ò–ï!!! –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –ø–æ–≥–æ–¥–∞, –∫–æ—Ç–æ—Ä–∞—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–Ω–µ—Å–µ—Ç —É—â–µ—Ä–± –∑–¥–æ—Ä–æ–≤—å—é!!! –ù–ï–ú–ï–î–õ–ï–ù–ù–û –ø—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç—å –º–µ—Ä—ã: –Ω–∞–π—Ç–∏ —É–∫—Ä—ã—Ç–∏–µ –≤–¥–∞–ª–∏ –æ—Ç –¥–µ—Ä–µ–≤—å–µ–≤ –∏ –ª–µ—Ç–∞—é—â–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤!"
    }
    if (pop > 0 and wind > 20) or temp < -40 or (temp > 40 and humidity > 40):
        return danger_levels["lvl_4"]
    elif (pop > 0.2 and wind > 15) or (temp > 33 and humidity > 50):
        return danger_levels["lvl_3"]
    elif (pop > 0.4 and wind > 9) or (temp > 30 and humidity > 50):
        return danger_levels["lvl_2"]
    else:
        return danger_levels["lvl_1"]


def clean_database():
    cur.execute("""
        DELETE FROM users
        WHERE id NOT IN (
            SELECT MAX(id) FROM users GROUP BY user_id
        )
    """)
    conn.commit()


def convert_wind_speed(speed):
    return speed * 3.6  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –º/—Å -> –∫–º/—á


def get_sun_times(sunrise, sunset):
    sunrise_time = datetime.datetime.fromtimestamp(sunrise).strftime('%H:%M')
    sunset_time = datetime.datetime.fromtimestamp(sunset).strftime('%H:%M')
    return sunrise_time, sunset_time


def get_day_length(sunrise, sunset):
    day_length_seconds = sunset - sunrise
    hours, remainder = divmod(day_length_seconds, 3600)
    minutes, _ = divmod(remainder, 60)
    return f"{hours}—á {minutes}–º–∏–Ω"


async def send_weather_warning(user_id, city, danger_level, weather_details):
    await bot.send_message(user_id, f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —É–≥—Ä–æ–∑–∞ –ø–æ–≥–æ–¥—ã –≤ {city}!\n"
                                    f"–£—Ä–æ–≤–µ–Ω—å —É–≥—Ä–æ–∑—ã: {danger_level}\n"
                                    f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather_details['temp']}¬∞C\n"
                                    f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather_details['humidity']}%\n"
                                    f"–í–µ—Ç–µ—Ä: {weather_details['wind_speed']} –º/—Å ({weather_details['wind_speed_km_h']:.2f} –∫–º/—á)\n"
                                    f"–î–∞–≤–ª–µ–Ω–∏–µ: {weather_details['pressure']} –≥–ü–∞\n"
                                    f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤: {weather_details['pop'] * 100}%\n"
                                    f"–í–æ—Å—Ö–æ–¥: {weather_details['sunrise_time']}\n"
                                    f"–ó–∞–∫–∞—Ç: {weather_details['sunset_time']}\n"
                                    f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {weather_details['day_length']}")


async def check_weather():
    clean_database()  # –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–≥–æ–¥—ã

    cur.execute("SELECT user_id, city, last_alert_time_lvl_2, last_alert_time_lvl_3, last_alert_time_lvl_4 FROM users")
    users = cur.fetchall()

    for user_id, city, last_alert_time_lvl_2, last_alert_time_lvl_3, last_alert_time_lvl_4 in users:
        try:
            weather_data = get_weather_data(city)
            cur_weather = weather_data["main"]["temp"]
            humidity = weather_data["main"]["humidity"]
            wind_speed_m_s = weather_data["wind"]["speed"]
            wind_speed_km_h = convert_wind_speed(wind_speed_m_s)
            pressure = weather_data["main"]["pressure"]
            pop = weather_data.get('pop', 0)  # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤ –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
            sunrise = weather_data["sys"]["sunrise"]
            sunset = weather_data["sys"]["sunset"]
            sunrise_time, sunset_time = get_sun_times(sunrise, sunset)
            day_length = get_day_length(sunrise, sunset)
            danger_level = get_danger_level(cur_weather, wind_speed_m_s, pop, humidity)

            weather_details = {
                "temp": cur_weather,
                "humidity": humidity,
                "wind_speed": wind_speed_m_s,
                "wind_speed_km_h": wind_speed_km_h,
                "pressure": pressure,
                "pop": pop,
                "sunrise_time": sunrise_time,
                "sunset_time": sunset_time,
                "day_length": day_length
            }

            current_time = datetime.datetime.now()

            if danger_level == "üü® –ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–∞—è –ø–æ–≥–æ–¥–∞, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –Ω–∞—Ä—É—à–∏—Ç—å –ø–ª–∞–Ω—ã –Ω–∞ –¥–µ–Ω—å.":
                if not last_alert_time_lvl_2 or (
                        current_time - datetime.datetime.fromisoformat(last_alert_time_lvl_2)).total_seconds() > 43200:
                    await send_weather_warning(user_id, city, danger_level, weather_details)
                    cur.execute("UPDATE users SET last_alert_time_lvl_2 = ? WHERE user_id = ?",
                                (current_time.isoformat(), user_id))
                    conn.commit()

            elif danger_level == "üüß –û–ø–∞—Å–Ω–∞—è –ø–æ–≥–æ–¥–∞, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –Ω–∞–Ω–µ—Å—Ç–∏ —É—â–µ—Ä–± –∑–¥–æ—Ä–æ–≤—å—é, –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–º –ø–æ—Ç–µ—Ä—è–º –∏ —Ç—Ä–∞—Ç–∞–º.":
                if not last_alert_time_lvl_3 or (
                        current_time - datetime.datetime.fromisoformat(last_alert_time_lvl_3)).total_seconds() > 14400:
                    await send_weather_warning(user_id, city, danger_level, weather_details)
                    cur.execute("UPDATE users SET last_alert_time_lvl_3 = ? WHERE user_id = ?",
                                (current_time.isoformat(), user_id))
                    conn.commit()

            elif danger_level == "üü• –í–ù–ò–ú–ê–ù–ò–ï!!! –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –ø–æ–≥–æ–¥–∞, –∫–æ—Ç–æ—Ä–∞—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–Ω–µ—Å–µ—Ç —É—â–µ—Ä–± –∑–¥–æ—Ä–æ–≤—å—é –∏ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –±–æ–ª—å—à–∏–º —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–º –ø–æ—Ç–µ—Ä—è–º! –ù–ï–ú–ï–î–õ–ï–ù–ù–û –ø—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç—å –º–µ—Ä—ã: –Ω–∞–π—Ç–∏ —É–∫—Ä—ã—Ç–∏–µ –≤–¥–∞–ª–∏ –æ—Ç –¥–µ—Ä–µ–≤—å–µ–≤ –∏ –ª–µ—Ç–∞—é—â–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤!":
                if not last_alert_time_lvl_4 or (
                        current_time - datetime.datetime.fromisoformat(last_alert_time_lvl_4)).total_seconds() > 1800:
                    await send_weather_warning(user_id, city, danger_level, weather_details)
                    cur.execute("UPDATE users SET last_alert_time_lvl_4 = ? WHERE user_id = ?",
                                (current_time.isoformat(), user_id))
                    conn.commit()

        except BotBlocked:
            cur.execute("DELETE FROM users WHERE user_id = ?", (user_id,))
            conn.commit()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–≥–æ–¥—ã –¥–ª—è {city}: {e}")


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = AsyncIOScheduler()
scheduler.add_job(check_weather, "interval", seconds=10)
scheduler.start()

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
