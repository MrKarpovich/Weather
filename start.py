import requests
import datetime
import time
import os
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

tg_bot_token = os.getenv("TG_BOT_TOKEN")
open_weather_token = os.getenv("OPEN_WEATHER_TOKEN")
bot = Bot(token=tg_bot_token)
dp = Dispatcher(bot)

print(f"–ë–æ—Ç –∑–∞–ø—É—Å—Ç–∏–ª—Å—è, –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Ç–µ–ª–µ–≥—É")

@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –º–Ω–µ –≥–æ—Ä–æ–¥, –∞ —è –æ—Ç–≤–µ—á—É –∫–∞–∫–∞—è —Ç–∞–º –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –ø–æ–≥–æ–¥–∞")

@dp.message_handler()
async def get_weather(message: types.Message):
    code_to_smile = {
        "Clear": "–Ø—Å–Ω–æ \U00002600",
        "Clouds": "–û–±–ª–∞—á–Ω–æ \U00002601",
        "Rain": "–î–æ–∂–¥—å \U00002614",
        "Drizzle": "–°–ª–∞–±—ã–π –î–æ–∂–¥—å \U00002614",
        "Thunderstorm": "–ì—Ä–æ–∑–∞ \U000026A1",
        "Snow": "–°–Ω–µ–≥ \U0001F328",
        "Mist": "–¢—É–º–∞–Ω \U0001F32B"
    }

    danger_levels = {
        "üü©": "üü© –û–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ—Ç, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ç–∏–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.",
        "üü®": "üü® –ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–∞—è –ø–æ–≥–æ–¥–∞, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –Ω–∞—Ä—É—à–∏—Ç—å –ø–ª–∞–Ω—ã –Ω–∞ –¥–µ–Ω—å.",
        "üüß": "üüß –û–ø–∞—Å–Ω–∞—è –ø–æ–≥–æ–¥–∞, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –Ω–∞–Ω–µ—Å—Ç–∏ —É—â–µ—Ä–± –∑–¥–æ—Ä–æ–≤—å—é, –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–º –ø–æ—Ç–µ—Ä—è–º –∏ —Ç—Ä–∞—Ç–∞–º.",
        "üü•": "üü• –í–ù–ò–ú–ê–ù–ò–ï!!! –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –ø–æ–≥–æ–¥–∞, –∫–æ—Ç–æ—Ä–∞—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–Ω–µ—Å–µ—Ç —É—â–µ—Ä–± –∑–¥–æ—Ä–æ–≤—å—é –∏ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –±–æ–ª—å—à–∏–º —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–º –ø–æ—Ç–µ—Ä—è–º! –ù–ï–ú–ï–î–õ–ï–ù–ù–û –ø—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç—å –º–µ—Ä—ã: –Ω–∞–π—Ç–∏ —É–∫—Ä—ã—Ç–∏–µ –≤–¥–∞–ª–∏ –æ—Ç –¥–µ—Ä–µ–≤—å–µ–≤ –∏ –ª–µ—Ç–∞—é—â–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤!"
    }

    try:
        r = requests.get(
            f"http://api.openweathermap.org/data/2.5/weather?q={message.text}&appid={open_weather_token}&units=metric"
        )
        data = r.json()

        city = data["name"]
        cur_weather = data["main"]["temp"]
        humidity = data["main"]["humidity"]
        pressure = data["main"]["pressure"]
        wind = data["wind"]["speed"]
        sunrise_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunrise"])
        sunset_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunset"])
        length_of_the_day = sunset_timestamp - sunrise_timestamp

        weather_description = data["weather"][0]["main"]
        if weather_description in code_to_smile:
            wd = code_to_smile[weather_description]
        else:
            wd = "–ì–ª—è–Ω—å –≤ –æ–∫–Ω–æ =)"

        def get_danger_level(temp, wind, pop, humidity):
            if (pop > 0.5 and wind > 20) or temp < -40 or (temp > 40 and humidity > 40):
                return danger_levels["üü•"]
            elif (pop > 0.5 and wind > 15) or (temp > 33 and humidity > 50):
                return danger_levels["üüß"]
            elif (pop > 0 and wind > 9) or (temp > 25 and humidity > 30):
                return danger_levels["üü®"]
            else:
                return danger_levels["üü©"]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã
        current_danger_level = get_danger_level(cur_weather, wind, data.get('pop', 0), humidity)

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        tomorrow = datetime.date.today() + datetime.timedelta(days=1)
        tomorrow_response = requests.get(
            f"http://api.openweathermap.org/data/2.5/forecast?q={message.text}&appid={open_weather_token}&units=metric"
        )
        tomorrow_data = tomorrow_response.json()
        tomorrow_weather = None
        for item in tomorrow_data['list']:
            date = datetime.datetime.fromtimestamp(item['dt'])
            if date.date() == tomorrow:
                tomorrow_weather = item
                break

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞
        after_tomorrow = datetime.date.today() + datetime.timedelta(days=2)
        after_tomorrow_response = requests.get(
            f"http://api.openweathermap.org/data/2.5/forecast?q={message.text}&appid={open_weather_token}&units=metric"
        )
        after_tomorrow_data = after_tomorrow_response.json()
        after_tomorrow_weather = None
        for item in after_tomorrow_data['list']:
            date = datetime.datetime.fromtimestamp(item['dt'])
            if date.date() == after_tomorrow:
                after_tomorrow_weather = item
                break

        await message.reply(f"–ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã –±—ã–ª —Å–¥–µ–ª–∞–Ω: {datetime.datetime.now().strftime('%d.%m.%y %H:%M')}\n"
                            f"====== –ü–æ–≥–æ–¥–∞ –≤ {city} ====== \n"
                            f"–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞: {cur_weather}C¬∞ {wd}\n"
                            f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                            f"–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–º.—Ä—Ç.—Å—Ç\n"
                            f"–í–µ—Ç–µ—Ä: {wind} –º/—Å - —ç—Ç–æ {round(wind * 3.6)} –∫–º/—á\n"
                            f"–í–æ—Å—Ö–æ–¥: {sunrise_timestamp}\n"
                            f"–ó–∞–∫–∞—Ç: {sunset_timestamp}\n"
                            f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {length_of_the_day}\n"
                            f"–£—Ä–æ–≤–µ–Ω—å –æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {current_danger_level}\n"
                            f"====== –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ====== \n"
                            f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {tomorrow_weather['main']['temp']}C¬∞ {code_to_smile[tomorrow_weather['weather'][0]['main']]}\n"
                            f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {tomorrow_weather['main']['humidity']}%\n"
                            f"–î–∞–≤–ª–µ–Ω–∏–µ: {tomorrow_weather['main']['pressure']} –º–º.—Ä—Ç.—Å—Ç\n"
                            f"–í–µ—Ç–µ—Ä: {tomorrow_weather['wind']['speed']} –º/—Å - —ç—Ç–æ {round(tomorrow_weather['wind']['speed'] * 3.6)} –∫–º/—á\n"
                            f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–ø–∞–¥–µ–Ω–∏—è –æ—Å–∞–¥–∫–æ–≤: {tomorrow_weather['pop'] * 100}%\n"
                            f"–£—Ä–æ–≤–µ–Ω—å –æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {get_danger_level(tomorrow_weather['main']['temp'], tomorrow_weather['wind']['speed'], tomorrow_weather['pop'], tomorrow_weather['main']['humidity'])}\n"
                            f"====== –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ ====== \n"
                            f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {after_tomorrow_weather['main']['temp']}C¬∞ {code_to_smile[after_tomorrow_weather['weather'][0]['main']]}\n"
                            f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {after_tomorrow_weather['main']['humidity']}%\n"
                            f"–î–∞–≤–ª–µ–Ω–∏–µ: {after_tomorrow_weather['main']['pressure']} –º–º.—Ä—Ç.—Å—Ç\n"
                            f"–í–µ—Ç–µ—Ä: {after_tomorrow_weather['wind']['speed']} –º/—Å - —ç—Ç–æ {round(after_tomorrow_weather['wind']['speed'] * 3.6)} –∫–º/—á\n"
                            f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤: {after_tomorrow_weather['pop'] * 100}%\n"
                            f"–£—Ä–æ–≤–µ–Ω—å –æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {get_danger_level(after_tomorrow_weather['main']['temp'], after_tomorrow_weather['wind']['speed'], after_tomorrow_weather['pop'], after_tomorrow_weather['main']['humidity'])}\n"
                            )

    except Exception as e:
        await message.reply(f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞. –û—à–∏–±–∫–∞: {e}")

async def on_shutdown(dp):
    await bot.close()
    await dp.storage.close()

if __name__ == '__main__':
    try:
        executor.start_polling(dp, on_shutdown=on_shutdown)
    except Exception as e:
        print(f"–ë–æ—Ç –∫—Ä–∞—à–Ω—É–ª —Å –æ—à–∏–±–∫–æ–π: {e}")
        time.sleep(5)  # –ü–æ–¥–æ–∂–¥–∞—Ç—å 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∑–∞–ø—É—Å–∫–æ–º
